name: ci

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  commit-policy:
    name: "üìù GRADE: Git Commit History & Messages"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "‚úÖ GRADE: Commit messages & count (min 8 commits with chore|feature|fix prefixes)"
        env:
          MIN_COMMITS: "8"   # change if you want a different minimum
        run: |
          set -e
          echo "üîç Validating all commits in repository history"
          BAD=0

          # Count ALL commits in the repository (not just the push range)
          ALL_COMMITS=$(git rev-list --no-merges HEAD || true)
          if [ -z "$ALL_COMMITS" ]; then
            echo "::error::‚ùå No commits found in repository."
            exit 1
          fi

          TOTAL_COUNT=$(echo "$ALL_COMMITS" | wc -l | tr -d ' ')
          echo "üìä Found $TOTAL_COUNT total commits in repository (minimum required: $MIN_COMMITS)"
          
          if [ "$TOTAL_COUNT" -lt "$MIN_COMMITS" ]; then
            echo "::error::‚ùå GRADE FAIL: Found $TOTAL_COUNT total commits; require at least $MIN_COMMITS commits in repository."
            BAD=1
          else
            echo "‚úÖ GRADE PASS: Commit count requirement met ($TOTAL_COUNT >= $MIN_COMMITS)"
          fi

          echo ""
          echo "üîç Checking commit message format for all commits..."
          for c in $ALL_COMMITS; do
            MSG=$(git log -1 --pretty=%s "$c")
            if ! echo "$MSG" | grep -Eiq '^(chore|feature|fix): '; then
              echo "::error::‚ùå GRADE FAIL: Commit $c message must start with 'chore: ', 'feature: ', or 'fix: ' ‚Äî got: $MSG"
              BAD=1
            else
              echo "‚úÖ Valid: $MSG"
            fi
          done

          if [ $BAD -eq 0 ]; then
            echo ""
            echo "‚úÖ GRADE PASS: All commit messages follow conventional format!"
          fi

          exit $BAD

  build-test:
    name: "üß™ GRADE: Code Quality & Testing"
    runs-on: ubuntu-latest
    needs: commit-policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "‚úÖ GRADE: Project structure verification"
        run: |
          echo "üîç Checking required project structure..."
          MISSING=0
          
          if [ -f README.md ]; then
            echo "‚úÖ README.md found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing README.md"
            MISSING=1
          fi
          
          if [ -f requirements.txt ]; then
            echo "‚úÖ requirements.txt found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing requirements.txt"
            MISSING=1
          fi
          
          if [ -d src ]; then
            echo "‚úÖ src/ directory found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing src/ directory"
            MISSING=1
          fi
          
          if [ -d tests ]; then
            echo "‚úÖ tests/ directory found"
          else
            echo "::error::‚ùå GRADE FAIL: Missing tests/ directory"
            MISSING=1
          fi
          
          if [ $MISSING -eq 0 ]; then
            echo "‚úÖ GRADE PASS: All required structure elements present!"
          fi
          
          exit $MISSING

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          # Ensure critical tools present even if students forget them:
          pip install pytest pytest-cov pytest-pylint coverage pylint

      - name: "‚úÖ GRADE: Lint check (pylint --errors-only)"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Running pylint on source code..."
          pylint --errors-only src
          echo "‚úÖ No linting errors found!"

      - name: "‚úÖ GRADE: Pytest-pylint integration test"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Running pytest with pylint integration..."
          pytest --pylint src -v
          echo "‚úÖ Pytest-pylint integration passed!"

      - name: "‚úÖ GRADE: Unit tests execution"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Running unit tests..."
          pytest tests -v
          echo "‚úÖ All unit tests passed!"

      - name: "‚úÖ GRADE: Test coverage (must be 100%)"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Checking test coverage..."
          coverage run -m pytest tests
          coverage report --fail-under=100
          echo "‚úÖ 100% test coverage achieved!"

      - name: "üìä GRADE: Coverage report summary"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üìä Final coverage report:"
          coverage report